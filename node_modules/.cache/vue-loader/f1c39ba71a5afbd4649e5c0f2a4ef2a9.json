{"remainingRequest":"/Users/polinasetinina/Desktop/web_progr/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/polinasetinina/Desktop/web_progr/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/polinasetinina/Desktop/web_progr/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/polinasetinina/Desktop/web_progr/src/views/News.vue?vue&type=template&id=1aa8c6e6&","dependencies":[{"path":"/Users/polinasetinina/Desktop/web_progr/src/views/News.vue","mtime":1606662118537},{"path":"/Users/polinasetinina/Desktop/web_progr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/polinasetinina/Desktop/web_progr/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/polinasetinina/Desktop/web_progr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/polinasetinina/Desktop/web_progr/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}